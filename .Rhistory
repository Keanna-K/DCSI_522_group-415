geom_histogram(color='white') +
xlab("slope bootstrap distribution") +
ylab("Count") +
geom_vline(xintercept=b_obs$statistic,color="red") +
theme_classic()
hist_b
b_obs <- tidy(lm(speed ~ training_miles, data=marathon)) %>%
filter(term == "training_miles") %>%
select(estimate, statistic, p.value)
b_obs$statistic
t_star <- data.frame(t_star=(boot_fits$estimate - b_obs$estimate)/boot_fits$std.error)
# create visualization of bootstrap distribution
hist_b <- ggplot(t_star,aes(x=t_star)) +
geom_histogram(color='white', bins = 60) +
xlab("slope bootstrap distribution") +
ylab("Count") +
geom_vline(xintercept=b_obs$statistic,color="red") +
theme_classic()
hist_b
b_obs <- tidy(lm(speed ~ training_miles, data=marathon)) %>%
filter(term == "training_miles") %>%
select(estimate, statistic, p.value)
b_obs$statistic
t_star <- data.frame(t_star=(boot_fits$estimate - b_obs$estimate)/boot_fits$std.error)
# create visualization of bootstrap distribution
hist_b <- ggplot(t_star,aes(x=t_star)) +
geom_histogram(color='white', bins = 60) +
xlab("slope bootstrap distribution") +
ylab("Count") +
geom_vline(xintercept=b_obs$statistic,color="red") +
theme_classic(12)
hist_b
b_obs <- tidy(lm(speed ~ training_miles, data=marathon)) %>%
filter(term == "training_miles") %>%
select(estimate, statistic, p.value)
b_obs$statistic
t_star <- data.frame(t_star=(boot_fits$estimate - b_obs$estimate)/boot_fits$std.error)
# create visualization of bootstrap distribution
hist_b <- ggplot(t_star,aes(x=t_star)) +
geom_histogram(color='white', bins = 60) +
xlab("slope bootstrap distribution") +
ylab("Count") +
geom_vline(xintercept=b_obs$statistic,color="red") +
theme_classic(base_size = 16)
hist_b
#pval using bootstrapping
pval_boot <- (1 + sum(abs(t_star) > abs(b_obs$statistic)))/(N + 1)
pval_boot
brain_data$brain_wgt
Y <- brain_data$brain_wgt
Y
Y <- brain_data$brain_wgt
typeof(Y)
Y <- [brain_data$brain_wgt]
Y <- c(brain_data$brain_wgt)
typeof(Y)
Y <- brain_data$brain_wgt
(1, (Y-1)/brain_data$body_wgt)
Y <- brain_data$brain_wgt
[1, (Y-1)/brain_data$body_wgt]
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
X
Y <- brain_data$brain_wgt
X = c(1, c(Y-1)/brain_data$body_wgt)
X
Y <- brain_data$brain_wgt
X = c((1, (Y-1)/brain_data$body_wgt))
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
matrix((Y-1)/brain_data$body_wgt)
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
matrix((Y-1)/brain_data$body_wgt, ncol = 2)
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
matrix(1, (Y-1)/brain_data$body_wgt, ncol = 2)
Y <- brain_data$brain_wgt
X = c(1, (Y-1)/brain_data$body_wgt)
matrix((1,(Y-1)/brain_data$body_wgt), ncol = 2)
Y <- brain_data$brain_wgt
matrix(brain_data$body_wgt), ncol = 2)
Y <- brain_data$brain_wgt
matrix(brain_data$body_wgt, ncol = 2)
Y <- brain_data$brain_wgt
X <- matrix(brain_data$body_wgt, ncol = 2)
X[,2] <- 1
Y <- brain_data$brain_wgt
X <- matrix(brain_data$body_wgt, nrow = 59)
X[,2] <- 1
Y <- brain_data$brain_wgt
X <- matrix(brain_data$body_wgt, nrow = 59, ncol = 2)
X[,2] <- 1
Y <- brain_data$brain_wgt
X <- matrix(brain_data$body_wgt, nrow = 59, ncol = 2)
X[,2] <- 1
X
Y <- brain_data$brain_wgt
X<- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
X
Y <- brain_data$brain_wgt
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
X
Y <- brain_data$brain_wgt
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
Y
X
Y <- matrix(brain_data$brain_wgt)
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
Y
X
Y <- matrix(brain_data$brain_wgt)
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
head(Y)
X
Y <- matrix(brain_data$brain_wgt)
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
head(Y)
head(X)
t(X)%*%X
solve(t(X)%*%X)%*%t(x)%*%Y
solve(t(X)%*%X)%*%t(X)%*%Y
b_hat = solve(t(X)%*%X)%*%t(X)%*%Y
b_hat
b_hat = solve(t(X)%*%X)%*%t(X)%*%Y
b_hat
lm(brain_data$brain_wgt~brain_data$body_wgt)
lm(Sepal.Width~Sepal.Length*Species, data=iris)
model_4 <- lm(Sepal.Width~Sepal.Length*Species, data=iris)
model_4 <- lm(Sepal.Width~Sepal.Length*Species, data=iris)
tidy(model_4)
model_4 <- lm(Sepal.Width~Sepal.Length*Species, data=iris)
confint_tidy(model_4)
model_4 <- lm(Sepal.Width~Sepal.Length*Species, data=iris)
tidy(model_4)
confint_tidy(model_4)
predict(interval="confidence", newdata = tibble(Sepal.Length = 5.0, Species = "setosa"))
predict(model_4, interval="confidence", newdata = tibble(Sepal.Length = 5.0, Species = "setosa"))
predict(model_4, interval="prediction", newdata = tibble(Sepal.Length = 5.0, Species = "setosa"))
model_5 = lm(univ_gpa~high_gpa+math_sat+verb_sat)
model_5 = lm(univ_gpa~high_gpa+math_sat+verb_sat, data=gpa_data)
model_5
geom_tile(model_5)
geom_tile(model_5, data = gpa_data)
geom_tile(aes(model_5), data = gpa_data)
cor(model_5)
cor(gpa_data)
#ggplot() +
# geom_tile()
cor(gpa_data) %>% melt()
ggplot(cor(gpa_data)) +
geom_tile()
library(reshape)
cor(gpa_data) %>% melt()
library(reshape)
exp_var <- gpa_data.drop(univ_gpa)
library(reshape)
exp_var <- gpa_data.dropcol(univ_gpa)
library(reshape)
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
cor(exp_var) %>% melt()
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(x='X1', y='X2', fill=value) + geom_tile()
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x='X1', y='X2', fill=value)) + geom_tile()
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) + geom_tile()
library(tidyverse)
library(broom)
library(rsample)
gpa_data <- read_csv("gpa_data.csv")
brain_data <- read_csv("brain_data.csv")
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
model_a <- lm(speed ~ training_miles, data=marathon)
model_a
tidy(model_a)
library(rsample)
N <- 5000
set.seed(5613)
boot_fits <- marathon %>%
rsample::bootstraps(times = N) %>%
mutate(lm = map(splits, ~ lm(speed ~ training_miles, data = analysis(.x))),
tidy = map(lm, broom::tidy)) %>%
select(-splits, -lm) %>%
unnest(tidy) %>%
filter(term == "training_miles") %>%
select(-term)
head(boot_fits)
b_obs <- tidy(lm(speed ~ training_miles, data=marathon)) %>%
filter(term == "training_miles") %>%
select(estimate, statistic, p.value)
# calculate t-star values from bootstrap samples
t_star <- data.frame(t_star=(boot_fits$estimate - b_obs$estimate)/boot_fits$std.error)
# create visualization of bootstrap distribution
hist_b <- ggplot(t_star,aes(x=t_star)) +
geom_histogram(color='white', bins = 60) +
xlab("slope bootstrap distribution") +
ylab("Count") +
geom_vline(xintercept=b_obs$statistic,color="red") +
theme_classic(base_size = 16)
hist_b
#pval using bootstrapping
pval_boot <- (1 + sum(abs(t_star) > abs(b_obs$statistic)))/(N + 1)
pval_boot
Y <- matrix(brain_data$brain_wgt)
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
head(Y)
head(X)
Y <- matrix(brain_data$brain_wgt)
X <- matrix(1, nrow = 59, ncol = 2)
X[,2] <- brain_data$body_wgt
head(Y)
head(X)
b_hat = solve(t(X)%*%X)%*%t(X)%*%Y
b_hat
lm(brain_data$brain_wgt~brain_data$body_wgt)
model_4 <- lm(Sepal.Width~Sepal.Length*Species, data=iris)
tidy(model_4)
confint_tidy(model_4)
model_5 = lm(univ_gpa~high_gpa+math_sat+verb_sat, data=gpa_data)
model_5
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) + geom_tile()+ scale_fill_gradient(low = "white", high = "steelblue"))
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) + geom_tile()+ scale_fill_gradient(low = "white", high = "steelblue")
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "correlation matrix of gpa variables")
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "correlation matrix of gpa variables",
x="")
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="")
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_grey(base_size = 12)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_grey(base_size = 16)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_grey(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_classic(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_bw(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_light(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradientn(colours = c("white", "grey", "steelblue"), values = c(0,0.1,1)) +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradientn(colours = c("white", "steelblue"), values = c(0,1)) +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradientn(colours = c("grey", "white", "steelblue"), values = c(0,0.1,1)) +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
cor_mat
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat
# create heat map visualization
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
install.packages("car")
library(tidyverse)
library(broom)
library(rsample)
library(car)
model_5 = lm(univ_gpa~high_gpa+math_sat+verb_sat, data=gpa_data)
model_5
library(reshape)
# get all explanatory variables
exp_var <- gpa_data %>% select(-univ_gpa)
exp_var
# calculate correlation matrix
cor_mat <- cor(exp_var) %>% melt()
cor_mat
# create heat map visualization
cor_mat %>% ggplot(aes(x=X1, y=X2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title= "Correlation Matrix of Student GPA Variables",
x="", y="") +
theme_minimal(base_size = 15)
vif(model_5)
vif(model_5)
# change order of variables in linear model
model_5_2 = lm(univ_gpa~math_sat+verb_sat+high_gpa, data=gpa_data)
vif(model_5_2)
# change order of variables in linear model
model_5_3 = lm(univ_gpa~verb_sat+high_gpa+math_sat, data=gpa_data)
vif(model_5_3)
# change order of variables in linear model
model_5_4 = lm(univ_gpa~verb_sat+math_sat+high_gpa, data=gpa_data)
vif(model_5_4)
setwd("~/")
install.packages("reticulate")
reticulate::repl_python()
y
setwd("~/Documents/DSCI_522_workflow/DCSI_522_group-415")
